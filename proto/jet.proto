syntax = "proto3";
package jet;

option go_package = "github.com/rpcpool/yellowstone-jet/proto;jet_gateway_grpc";

service JetGateway {
  rpc GetVersion(VersionRequest) returns (VersionResponse);

  rpc Auth(AuthRequest) returns (AuthResponse);
  rpc Publish(stream PublishRequest) returns (stream PublishResponse);
  rpc Subscribe(stream SubscribeRequest) returns (stream SubscribeResponse);
}


message AuthRequest {
  oneof auth_step {
    GetChallengeRequest begin_auth = 1;
    AnswerChallengeRequest complete_auth = 2;
  }
}

message AuthResponse {
  oneof auth_step {
    GetChallengeResponse begin_auth = 1;
    AnswerChallengeResponse complete_auth = 2;
  }
}

message GetChallengeRequest {
  bytes pubkey_to_verify = 1;
}

message GetChallengeResponse {
  // Challenge to sign
  string challenge = 1;
  // The pubkey the client claim to own
  bytes pubkey_to_verify = 2;
}

message AnswerChallengeRequest {
  string challenge = 1;

  // The pubkey the client claim to own
  bytes pubkey_to_verify = 2;

  // The signature of the Hash(challenge || nonce)
  bytes signature = 3;

  bytes nonce = 4;

}

message AnswerChallengeResponse {
  bool success = 1;
  // If not success, auth_token will contains 0 bytes.
  string one_time_auth_token = 2; // otak
}

message VersionRequest {}

message VersionResponse {
  string version = 1;
}

message Ping {
  uint32 id = 1;
}

message Pong {
  uint32 id = 1;
}

message PublishRequest {
  oneof message {
    Ping ping = 1;
    Pong pong = 2;
    PublishTransaction transaction = 3;
  }
}

message PublishTransaction {
  oneof payload {
    bytes legacy_payload = 1;  // For backwards compatibility
    TransactionWrapper new_payload = 2;  // New structured format
  }
}

message TransactionWrapper {
  bytes transaction = 1;
  optional TransactionConfig config = 2;
  optional uint64 timestamp = 3;
}

message TransactionConfig {
  bool skip_preflight = 1;
  bool skip_sanitize = 2;
  optional uint32 max_retries = 3;
  repeated string blocklist_pdas = 4;
}

message PublishResponse {
  oneof message {
    Ping ping = 1;
    Pong pong = 2;
  }
}

message SubscribeRequest {
  oneof message {
    Ping ping = 1;
    Pong pong = 2;
    SubscribeUpdateLimit update_limit = 3;
    // first message to send
    InitialSubscribeRequest init = 4;
  }
}

message InitialSubscribeRequest {
  FeatureFlags features = 1;
}

// Feature flags to negotiate capabilities between client and server
enum Feature {
  // Default value when no feature is specified (Protocol Buffers default)
  // This enables backward compatibility with older clients/servers
  FEATURE_UNSPECIFIED = 0;

  // Enables structured transaction format with additional metadata
  TRANSACTION_PAYLOAD_V2 = 1;

  // Future features flags
}

message FeatureFlags {
  repeated Feature supported_features = 1;
}


message SubscribeUpdateLimit {
  uint64 messages_per100ms = 1;
}

message SubscribeResponse {
  oneof message {
    Ping ping = 1;
    Pong pong = 2;
    SubscribeTransaction transaction = 3;
  }
}

message SubscribeTransaction {
  oneof payload {
    bytes legacy_payload = 1;  // For backwards compatibility
    TransactionWrapper new_payload = 2;  // New structured format
  }
}
